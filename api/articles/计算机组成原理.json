{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"计算机组成原理","date":"2022-11-11T13:33:06.356Z","updated":"2022-11-11T14:32:35.875Z","comments":true,"path":"api/articles/计算机组成原理.json","keywords":null,"cover":[],"content":"<h2 id=\"3-存储系统\"><a href=\"#3-存储系统\" class=\"headerlink\" title=\"3.存储系统\"></a>3.存储系统</h2><h3 id=\"1-双端口RAM和多模块存储器\"><a href=\"#1-双端口RAM和多模块存储器\" class=\"headerlink\" title=\"1.双端口RAM和多模块存储器\"></a>1.双端口RAM和多模块存储器</h3><h4 id=\"1-多体并行存储器\"><a href=\"#1-多体并行存储器\" class=\"headerlink\" title=\"1.多体并行存储器\"></a>1.多体并行存储器</h4><h5 id=\"1-高位交叉编址\"><a href=\"#1-高位交叉编址\" class=\"headerlink\" title=\"1.高位交叉编址\"></a>1.高位交叉编址</h5><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221001210754671.png\" alt=\"image-20221001210754671\"></p>\n<h5 id=\"2-低位交叉编址\"><a href=\"#2-低位交叉编址\" class=\"headerlink\" title=\"2.低位交叉编址\"></a>2.低位交叉编址</h5><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221001211004266.png\" alt=\"image-20221001211004266\"></p>\n<p>实际上采用了“流水线”的方式并行存取，当存储周期为T时，存取时间为r时，为了使流水线不间断，，应该保证模块数m&gt;&#x3D;T&#x2F;r，如果m小于T&#x2F;r，则cpu需要等待r。</p>\n<p>若给定一个地址x，应该用它的体号来判断它属于第几个存储体。</p>\n<h5 id=\"3-多模块存储器\"><a href=\"#3-多模块存储器\" class=\"headerlink\" title=\"3.多模块存储器\"></a>3.多模块存储器</h5><h6 id=\"1-多体并行存储器-1\"><a href=\"#1-多体并行存储器-1\" class=\"headerlink\" title=\"1.多体并行存储器\"></a>1.多体并行存储器</h6><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221001211910296.png\" alt=\"image-20221001211910296\"></p>\n<h6 id=\"2-单体多字存储器\"><a href=\"#2-单体多字存储器\" class=\"headerlink\" title=\"2.单体多字存储器\"></a>2.单体多字存储器</h6><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221001211949521.png\" alt=\"image-20221001211949521\"></p>\n<p>每次直接读一整行字，灵活性没有多体高，会读入一些没有意义的数据。但是速度都差不多，高位交叉的多体存储器相当于扩单纯的扩容，低位交叉的多体存储器相当于双通道，可以使吞吐量翻倍在连续访问时，</p>\n<h4 id=\"2-双端口RAM\"><a href=\"#2-双端口RAM\" class=\"headerlink\" title=\"2.双端口RAM\"></a>2.双端口RAM</h4><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221001212250666.png\" alt=\"image-20221001212250666\"></p>\n<h3 id=\"2-Cache\"><a href=\"#2-Cache\" class=\"headerlink\" title=\"2.Cache\"></a>2.Cache</h3><h4 id=\"1-Cache工作原理\"><a href=\"#1-Cache工作原理\" class=\"headerlink\" title=\"1.Cache工作原理\"></a>1.Cache工作原理</h4><p>cache被集成在CPU内部，cache用SRAM实现，速度快，成本高。</p>\n<p>RAM可分为静态存储器（<a href=\"https://so.csdn.net/so/search?q=Static&spm=1001.2101.3001.7020\">Static</a> Random Access Memory,SRAM）和动态存储器（Dynamic Random Access Memory）。SRAM中的存储单元相当于一个锁存器，只有0，1两个稳态；DRAM则是利用电容存储电荷来保存0和1两种状态，因此需要定时对其进行刷新，否则随着时间的推移，电容其中存储的电荷将逐渐消失。</p>\n<p>SRAM：读写速度快，生产成本高，多用于容量较小的高速缓冲存储器。</p>\n<p>DRAM：读写速度较慢，集成度高，生产成本低，多用于容量较大的主存储器。</p>\n<h4 id=\"2-局部性原理\"><a href=\"#2-局部性原理\" class=\"headerlink\" title=\"2.局部性原理\"></a>2.局部性原理</h4><h5 id=\"1-空间局部性\"><a href=\"#1-空间局部性\" class=\"headerlink\" title=\"1.空间局部性\"></a>1.空间局部性</h5><p>在最近的未来要用到的信息(指令和数据)，很可能与现在正在使用的信息在存储空间上是邻近的（数组元素，顺序执行的指令代码）</p>\n<h5 id=\"2-时间局部性\"><a href=\"#2-时间局部性\" class=\"headerlink\" title=\"2.时间局部性\"></a>2.时间局部性</h5><p>在最近的未来要用到的信息，很可能是现在正在使用的信息（循环结构的指令代码）</p>\n<p>基于局部性原理，不难想到，可以把CPU目前访问的地址“周围”的部分数据放到cache中</p>\n<h4 id=\"3-性能分析\"><a href=\"#3-性能分析\" class=\"headerlink\" title=\"3.性能分析\"></a>3.性能分析</h4><p>命中率：CPU想要访问的信息已经在Cache中的比率</p>\n<p>设tc为访问一次Cache所需时间,tm为访问一次主存所需时间</p>\n<p>Cache—主存系统的平均访问时间t为</p>\n<p>t &#x3D; Htc+(1 一H)(tc + tm)</p>\n<p>主存和Cache是以块为单位进行数据交换。<img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221002110826217.png\" alt=\"image-20221002110826217\"></p>\n<p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/files\\Typora\\photo\\image-20221002110744217.png\" alt=\"image-20221002110744217\"></p>\n<h3 id=\"3-Cache和主存的映射方式\"><a href=\"#3-Cache和主存的映射方式\" class=\"headerlink\" title=\"3.Cache和主存的映射方式\"></a>3.Cache和主存的映射方式</h3><h4 id=\"1-全相联映射\"><a href=\"#1-全相联映射\" class=\"headerlink\" title=\"1.全相联映射\"></a>1.全相联映射</h4><p>主存块可以放在Cache任意位置（Cache块和主存块大小相等）</p>\n<p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221002113658075.png\" alt=\"image-20221002113658075\"></p>\n<p>Cpu访问主存地址</p>\n<img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221002113915339.png\" alt=\"image-20221002113915339\" style=\"zoom: 50%;\">\n\n<h4 id=\"2-直接映射\"><a href=\"#2-直接映射\" class=\"headerlink\" title=\"2.直接映射\"></a>2.直接映射</h4><p>每个主存块只能放到一个特定的位置:Cache块号&#x3D;主存块号% Cache总块数</p>\n<p>若cache总块数&#x3D;2^n,则主存块号末尾n位直接反映它在Cache中的位置，将主存块号的其余位作为标记即可</p>\n<img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221002114455332.png\" alt=\"image-20221002114455332\" style=\"zoom:50%;\">\n\n<h4 id=\"3-组相联映射\"><a href=\"#3-组相联映射\" class=\"headerlink\" title=\"3.组相联映射\"></a>3.组相联映射</h4><p>Cache块分为若干组，每个主存块可放到特定分组中的任意一个位置，组号&#x3D;主存块号%分组数</p>\n<img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221002114808502.png\" alt=\"image-20221002114808502\" style=\"zoom: 33%;\">\n\n<h3 id=\"4-替换算法\"><a href=\"#4-替换算法\" class=\"headerlink\" title=\"4.替换算法\"></a>4.替换算法</h3><h4 id=\"1-随机算法（RAND）\"><a href=\"#1-随机算法（RAND）\" class=\"headerlink\" title=\"1.随机算法（RAND）\"></a>1.随机算法（RAND）</h4><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221002143245325.png\" alt=\"image-20221002143245325\" style=\"zoom: 33%;\">\n\n<h4 id=\"2-先进先出算法（FIFO）\"><a href=\"#2-先进先出算法（FIFO）\" class=\"headerlink\" title=\"2.先进先出算法（FIFO）\"></a>2.先进先出算法（FIFO）</h4><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221002143639367.png\" alt=\"image-20221002143639367\" style=\"zoom:33%;\">\n\n<h4 id=\"3-近期最少使用算法（LRU）\"><a href=\"#3-近期最少使用算法（LRU）\" class=\"headerlink\" title=\"3.近期最少使用算法（LRU）\"></a>3.近期最少使用算法（LRU）</h4><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221002144403326.png\" alt=\"image-20221002144403326\"></p>\n<h4 id=\"4-最不经常使用算法（LFU）\"><a href=\"#4-最不经常使用算法（LFU）\" class=\"headerlink\" title=\"4.最不经常使用算法（LFU）\"></a>4.最不经常使用算法（LFU）</h4><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221003161518354.png\" alt=\"image-20221003161518354\"></p>\n<h4 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5.总结\"></a>5.总结</h4><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221003161744632.png\" alt=\"image-20221003161744632\"></p>\n<h3 id=\"5-Cache写策略（确保主存中母本一致性）\"><a href=\"#5-Cache写策略（确保主存中母本一致性）\" class=\"headerlink\" title=\"5.Cache写策略（确保主存中母本一致性）\"></a>5.Cache写策略（确保主存中母本一致性）</h3><h4 id=\"1-写命中\"><a href=\"#1-写命中\" class=\"headerlink\" title=\"1.写命中\"></a>1.写命中</h4><h5 id=\"1-写回法\"><a href=\"#1-写回法\" class=\"headerlink\" title=\"1.写回法\"></a>1.写回法</h5><p>Cache设置脏位，当数据被修改是，脏位变成1。当CPU对Cache写命中时，只修改Cache的内容，而不立即写入主存，只有当此块被换出时才写回主存。减少了访存次数，但存在数据不一致的隐患。</p>\n<h5 id=\"2-全写法\"><a href=\"#2-全写法\" class=\"headerlink\" title=\"2.全写法\"></a>2.全写法</h5><p>当CPU对Cache写命中时，必须把数据同时写入Cache和主存，一般使用写缓冲(write buffer)，访问主存次数增加，速度变慢，但更能保证数据一致性。</p>\n<p>使用写缓冲。CPU写的速度很快，若写操作不频繁，则效果很好。减写操作很频繁手感熊会因为写缓冲饱和发生阻塞。（写缓冲是SRAM实现的FIFO队列）</p>\n<h4 id=\"2-写不命中\"><a href=\"#2-写不命中\" class=\"headerlink\" title=\"2.写不命中\"></a>2.写不命中</h4><h5 id=\"1-写分配法\"><a href=\"#1-写分配法\" class=\"headerlink\" title=\"1.写分配法\"></a>1.写分配法</h5><p>写分配法(write-allocate)———当CPU对Cache写不命中时，把主存中的块调入Cache，在Cache中修改。通常搭配写回法使用。</p>\n<h5 id=\"2-非写分配法\"><a href=\"#2-非写分配法\" class=\"headerlink\" title=\"2.非写分配法\"></a>2.非写分配法</h5><p>非写分配法(not-write-allocate)—当CPU对Cache写不命中时只写入主存，不调入Cache。搭配全写法使用。</p>\n<h4 id=\"3多级cache\"><a href=\"#3多级cache\" class=\"headerlink\" title=\"3多级cache\"></a>3多级cache</h4><p>现代计算机常采用多级cache</p>\n<p>离CPU越近的速度越快，容量越小，离CPU越远的速度越慢，容量越大</p>\n<h3 id=\"6-页式存储器\"><a href=\"#6-页式存储器\" class=\"headerlink\" title=\"6.页式存储器\"></a>6.页式存储器</h3><h4 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1.定义\"></a>1.定义</h4><p>一个程序（进程），在逻辑上被分为若干个大小相等的“页面”，页面大小和块大小相同，每个页面可以放入不同的主存块中。</p>\n<h4 id=\"2-虚地址和实地址\"><a href=\"#2-虚地址和实地址\" class=\"headerlink\" title=\"2.虚地址和实地址\"></a>2.虚地址和实地址</h4><p>逻辑地址（虚地址）：程序员视角看到的地址，逻辑页号+页内地址</p>\n<p>物理地址（实地址）：实际在主存中的地址，主存块号+页内地址</p>\n<p>CPU执行的机器指令中，使用的是逻辑地址，因此需要页表将逻辑地址转变为物理地址，</p>\n<p>页表的作用是为了记录每个逻辑页面存放到那个主存块当中</p>\n<img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221005153834309.png\" alt=\"image-20221005153834309\" style=\"zoom: 50%;\">\n\n<h4 id=\"3-地址变换过程\"><a href=\"#3-地址变换过程\" class=\"headerlink\" title=\"3.地址变换过程\"></a>3.地址变换过程</h4><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221005155954751.png\" alt=\"image-20221005155954751\"></p>\n<p>增加TLB</p>\n<p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221005160539793.png\" alt=\"image-20221005160539793\"></p>\n<h4 id=\"4-注意\"><a href=\"#4-注意\" class=\"headerlink\" title=\"4.注意\"></a>4.注意</h4><p>快表中存储的是页表项的副本，Cache中存储的是主存块的副本。</p>\n<h3 id=\"7-虚拟存储器\"><a href=\"#7-虚拟存储器\" class=\"headerlink\" title=\"7.虚拟存储器\"></a>7.虚拟存储器</h3><h4 id=\"1-页面虚拟存储器\"><a href=\"#1-页面虚拟存储器\" class=\"headerlink\" title=\"1.页面虚拟存储器\"></a>1.页面虚拟存储器</h4><p>定义：把程序拆分成大小相等的页面</p>\n<p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221005162418900.png\" alt=\"image-20221005162418900\"></p>\n<p>有效位:这个页面是否已调入主存</p>\n<p>脏位:这个页面是否被修改过</p>\n<p>引用位:用于“页面置换算法”，比如，可以用来统计这个页面被访问过多少次</p>\n<p>物理页:即主存块号</p>\n<p>磁盘地址:即这个页面的数据在磁盘中的存放位置</p>\n<h4 id=\"2-存储器层次化结构\"><a href=\"#2-存储器层次化结构\" class=\"headerlink\" title=\"2.存储器层次化结构\"></a>2.存储器层次化结构</h4><p>主存—辅存：实现虚拟存储系统，解决了主存容量不够的问题。</p>\n<p>Cache—主存：解决了主存和CPU速度不匹配的问题。</p>\n<h4 id=\"3-段式虚拟存储器\"><a href=\"#3-段式虚拟存储器\" class=\"headerlink\" title=\"3.段式虚拟存储器\"></a>3.段式虚拟存储器</h4><p>定义：把程序按照功能模块拆分</p>\n<h2 id=\"4-指令系统\"><a href=\"#4-指令系统\" class=\"headerlink\" title=\"4.指令系统\"></a>4.指令系统</h2><h3 id=\"1-回忆计算机工作过程\"><a href=\"#1-回忆计算机工作过程\" class=\"headerlink\" title=\"1.回忆计算机工作过程\"></a>1.回忆计算机工作过程</h3><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221016102952565.png\" alt=\"image-20221016102952565\" style=\"zoom:33%;\">\n\n<h3 id=\"2-指令格式\"><a href=\"#2-指令格式\" class=\"headerlink\" title=\"2.指令格式\"></a>2.指令格式</h3><h4 id=\"1-指令的定义\"><a href=\"#1-指令的定义\" class=\"headerlink\" title=\"1.指令的定义\"></a>1.指令的定义</h4><p>是指示计算机执行某种操作的命令，是计算机运行的最小功能单位。一台计算机的所有指令的集合构成该机的指令系统，也称为指令集。</p>\n<h4 id=\"2-指令格式-1\"><a href=\"#2-指令格式-1\" class=\"headerlink\" title=\"2.指令格式\"></a>2.指令格式</h4><p>一条指令就是一组有意义的二进制代码，一条指令通常要包括操作码字段和地址码字段。 </p>\n<h5 id=\"1-零地址指令（OP）\"><a href=\"#1-零地址指令（OP）\" class=\"headerlink\" title=\"1.零地址指令（OP）\"></a>1.零地址指令（OP）</h5><p>不需要操作数，如空操作数，停机，关中断等指令，堆栈计算机，两个操作数隐含存放在栈顶和次栈顶，计算结果压回栈顶</p>\n<h5 id=\"2-一地址指令（OP-A1）\"><a href=\"#2-一地址指令（OP-A1）\" class=\"headerlink\" title=\"2.一地址指令（OP + A1）\"></a>2.一地址指令（OP + A1）</h5><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221016150817964.png\" alt=\"image-20221016150817964\" style=\"zoom: 33%;\">\n\n<img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221016151134929.png\" alt=\"image-20221016151134929\" style=\"zoom:33%;\">\n\n<h4 id=\"3-按照指令长度分类\"><a href=\"#3-按照指令长度分类\" class=\"headerlink\" title=\"3.按照指令长度分类\"></a>3.按照指令长度分类</h4><p>定长操作码：指令系统中所有指令的操作码长度都相同，控制器的译码电路设计简单,但灵活性较低</p>\n<p>可变长操作码：指令系统中各指令的操作码长度可变，控制器的译码电路设计复杂,但灵活性较高</p>\n<h4 id=\"4-按照操作类型分类\"><a href=\"#4-按照操作类型分类\" class=\"headerlink\" title=\"4.按照操作类型分类\"></a>4.按照操作类型分类</h4><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221016151808924.png\" alt=\"image-20221016151808924\" style=\"zoom:33%;\">\n\n<h3 id=\"3-总结\"><a href=\"#3-总结\" class=\"headerlink\" title=\"3.总结\"></a>3.总结</h3><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221016151846923.png\" alt=\"image-20221016151846923\" style=\"zoom: 50%;\">\n\n<h3 id=\"4-扩展操作码\"><a href=\"#4-扩展操作码\" class=\"headerlink\" title=\"4.扩展操作码\"></a>4.扩展操作码</h3><p>定长指令字结构 + 可变长操作码（不同地址数的指令使用不同长度的操作码）</p>\n<p>通常情况下，对使用频率较高的指令，分配较短的操作码，对使用频率较低的指令，分配较长的操作码，从而尽可能减少指令译码和分析的时间。</p>\n<img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221016164724321.png\" alt=\"image-20221016164724321\" style=\"zoom:50%;\">\n\n<h3 id=\"5-指令寻址\"><a href=\"#5-指令寻址\" class=\"headerlink\" title=\"5.指令寻址\"></a>5.指令寻址</h3><h4 id=\"1-顺序寻址\"><a href=\"#1-顺序寻址\" class=\"headerlink\" title=\"1.顺序寻址\"></a>1.顺序寻址</h4><p>(PC)+“1”——&gt;PC</p>\n<h4 id=\"2-转移寻址\"><a href=\"#2-转移寻址\" class=\"headerlink\" title=\"2.转移寻址\"></a>2.转移寻址</h4><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221016165933132.png\" alt=\"image-20221016165933132\" style=\"zoom:33%;\">\n\n<h4 id=\"3-总结-1\"><a href=\"#3-总结-1\" class=\"headerlink\" title=\"3.总结\"></a>3.总结</h4><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221016170007271.png\" alt=\"image-20221016170007271\" style=\"zoom:50%;\">\n\n<h3 id=\"6-数据寻址\"><a href=\"#6-数据寻址\" class=\"headerlink\" title=\"6.数据寻址\"></a>6.数据寻址</h3><h2 id=\"5-中央处理器\"><a href=\"#5-中央处理器\" class=\"headerlink\" title=\"5.中央处理器\"></a>5.中央处理器</h2><p>计算机工作过程：首先PC将指令给到MAR，MAR进入储存体再到MDR，MDR给到IR，IR将操作码部分给到CU，分析指令，再将操作码送到CU，分析完指令，将地址码送到MAR，，然后到存储体中找到相应的数据，给到MDR，，然后通过数据通路送到ACC。 </p>\n<h3 id=\"1-CPU基本结构和功能\"><a href=\"#1-CPU基本结构和功能\" class=\"headerlink\" title=\"1.CPU基本结构和功能\"></a>1.CPU基本结构和功能</h3><h4 id=\"1-指令控制\"><a href=\"#1-指令控制\" class=\"headerlink\" title=\"1.指令控制\"></a>1.指令控制</h4><p>完成取指令，分析指令，和执行指令的操作，即程序的顺序控制。</p>\n<h4 id=\"2-操作控制\"><a href=\"#2-操作控制\" class=\"headerlink\" title=\"2.操作控制\"></a>2.操作控制</h4><p>一条指令的功能往往是由若干操作信号的组合来实现的。CPu管理并产生由内存取出的每条指令的操作信号，把各种操作信号送往相应的部件，从而控制这些部件按指令的要求进行动作。</p>\n<h4 id=\"3-时间控制\"><a href=\"#3-时间控制\" class=\"headerlink\" title=\"3.时间控制\"></a>3.时间控制</h4><p>对各种操作加以时间上的控制。时间控制要为每条指令按时间顺序提供应有的控制信号。</p>\n<h4 id=\"4-数据加工\"><a href=\"#4-数据加工\" class=\"headerlink\" title=\"4.数据加工\"></a>4.数据加工</h4><p>对数据进行算术和逻辑运算</p>\n<h4 id=\"5-中断处理\"><a href=\"#5-中断处理\" class=\"headerlink\" title=\"5.中断处理\"></a>5.中断处理</h4><p>对计算机运行过程中出现的异常情况和特殊请求进行处理。</p>\n<h4 id=\"6-运算器\"><a href=\"#6-运算器\" class=\"headerlink\" title=\"6.运算器\"></a>6.运算器</h4><p>对数据进行加工</p>\n<h4 id=\"7-控制器\"><a href=\"#7-控制器\" class=\"headerlink\" title=\"7.控制器\"></a>7.控制器</h4><p>协调并控制计算机各部件执行程序的指令序列,基本功能包括取指令、分析指令、执行指令</p>\n<h3 id=\"2-运算器的基本结构\"><a href=\"#2-运算器的基本结构\" class=\"headerlink\" title=\"2.运算器的基本结构\"></a>2.运算器的基本结构</h3><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221023204231316.png\" alt=\"image-20221023204231316\"><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221023205059903.png\" alt=\"image-20221023205059903\"></p>\n<h3 id=\"3-控制器的基本结构\"><a href=\"#3-控制器的基本结构\" class=\"headerlink\" title=\"3.控制器的基本结构\"></a>3.控制器的基本结构</h3><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221023205516550.png\" alt=\"image-20221023205516550\"></p>\n<h3 id=\"4-CPU基本结构\"><a href=\"#4-CPU基本结构\" class=\"headerlink\" title=\"4.CPU基本结构\"></a>4.CPU基本结构</h3><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221023205800380.png\" alt=\"image-20221023205800380\"></p>\n<h3 id=\"5-指令的执行过程\"><a href=\"#5-指令的执行过程\" class=\"headerlink\" title=\"5.指令的执行过程\"></a>5.指令的执行过程</h3><h4 id=\"1-指令周期\"><a href=\"#1-指令周期\" class=\"headerlink\" title=\"1.指令周期\"></a>1.指令周期</h4><p>CPU从主存中每取出并执一条指令所需的全部时间。</p>\n<img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221024100206376.png\" alt=\"image-20221024100206376\" style=\"zoom:33%;\">\n\n<img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221024101123572.png\" alt=\"image-20221024101123572\" style=\"zoom: 33%;\">\n\n<img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221024103754908.png\" alt=\"image-20221024103754908\" style=\"zoom:33%;\">\n\n<h3 id=\"6-数据通路的功能\"><a href=\"#6-数据通路的功能\" class=\"headerlink\" title=\"6.数据通路的功能\"></a>6.数据通路的功能</h3><p>内部总线是指同一部件，如CPU内部连接各寄存器及运算部件之间的总线;<br>系统总线是指同一台计算机系统的各部件，如CPU、内存、通道和各类I&#x2F;o接口间互相连接的总线。</p>\n<h4 id=\"1-寄存器之间的数据传送\"><a href=\"#1-寄存器之间的数据传送\" class=\"headerlink\" title=\"1.寄存器之间的数据传送\"></a>1.寄存器之间的数据传送</h4><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031120647879.png\" alt=\"image-20221031120647879\"><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031120658209.png\" alt=\"image-20221031120658209\" style=\"zoom:33%;\"></p>\n<h4 id=\"2-主存和CPU之间的数据传送\"><a href=\"#2-主存和CPU之间的数据传送\" class=\"headerlink\" title=\"2.主存和CPU之间的数据传送\"></a>2.主存和CPU之间的数据传送</h4><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/files\\Typora\\photo\\image-20221031121028511.png\" alt=\"image-20221031121028511\"></p>\n<h4 id=\"3-执行算术或逻辑运算\"><a href=\"#3-执行算术或逻辑运算\" class=\"headerlink\" title=\"3.执行算术或逻辑运算\"></a>3.执行算术或逻辑运算</h4><p>MDR传入IR，MDR里面也会保存一份。也可以直接从MDR传送到MAR。</p>\n<p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031121517029.png\" alt=\"image-20221031121517029\"></p>\n<img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031122128960.png\" alt=\"image-20221031122128960\" style=\"zoom:33%;\">\n\n<img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031122236394.png\" alt=\"image-20221031122236394\" style=\"zoom:33%;\">\n\n<img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031122423158.png\" alt=\"image-20221031122423158\" style=\"zoom:33%;\">\n\n<h3 id=\"7-专用数据通路\"><a href=\"#7-专用数据通路\" class=\"headerlink\" title=\"7.专用数据通路\"></a>7.专用数据通路</h3><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031150545882.png\" alt=\"image-20221031150545882\" style=\"zoom:33%;\">\n\n<p>运算器ALU不是寄存器，数据会被放到累加器ACC中，</p>\n<img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031150844840.png\" alt=\"image-20221031150844840\" style=\"zoom:33%;\">\n\n<p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031151319208.png\" alt=\"image-20221031151319208\"></p>\n<p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031151443524.png\" alt=\"image-20221031151443524\"></p>\n<p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031151530739.png\" alt=\"image-20221031151530739\"></p>\n<h3 id=\"8-控制器的设计\"><a href=\"#8-控制器的设计\" class=\"headerlink\" title=\"8.控制器的设计\"></a>8.控制器的设计</h3><h4 id=\"1-硬布线控制器\"><a href=\"#1-硬布线控制器\" class=\"headerlink\" title=\"1.硬布线控制器\"></a>1.硬布线控制器</h4><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031152814256.png\" alt=\"image-20221031152814256\"></p>\n<p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031155936215.png\" alt=\"image-20221031155936215\"></p>\n<p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031160431546.png\" alt=\"image-20221031160431546\"></p>\n<h4 id=\"2-硬布线控制器的设计\"><a href=\"#2-硬布线控制器的设计\" class=\"headerlink\" title=\"2.硬布线控制器的设计\"></a>2.硬布线控制器的设计</h4><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031162459206.png\" alt=\"image-20221031162459206\"></p>\n<p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031162617844.png\" alt=\"image-20221031162617844\"></p>\n<p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031162955844.png\" alt=\"image-20221031162955844\"></p>\n<p>1–&gt;R是指向主存发出读信号。</p>\n<h4 id=\"3-微程序控制器的基本原理（考察频率较高）\"><a href=\"#3-微程序控制器的基本原理（考察频率较高）\" class=\"headerlink\" title=\"3.微程序控制器的基本原理（考察频率较高）\"></a>3.微程序控制器的基本原理（考察频率较高）</h4><h5 id=\"1-微程序\"><a href=\"#1-微程序\" class=\"headerlink\" title=\"1.微程序\"></a>1.微程序</h5><p>硬布线控制器：微操作控制信号有组合逻辑电路根据当前的指令码，状态和时序（时序信息包括机器周期和节拍），即使产生。</p>\n<p>程序：是指令组成的。</p>\n<p>微程序：由微指令序列组成，每一种指令对应一个微程序。</p>\n<p>指令是对程序执行步骤的描述，微指令是对指令执行步骤的描述</p>\n<p>指令是对微指令功能的“封装”</p>\n<p>一条微指令可能包含多个微命令，</p>\n<p>微命令和微操作是一一对应的。</p>\n<h5 id=\"2-微程序控制器基本结构\"><a href=\"#2-微程序控制器基本结构\" class=\"headerlink\" title=\"2.微程序控制器基本结构\"></a>2.微程序控制器基本结构</h5><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031165546854.png\" alt=\"image-20221031165546854\"></p>\n<h5 id=\"3-工作原理\"><a href=\"#3-工作原理\" class=\"headerlink\" title=\"3.工作原理\"></a>3.工作原理</h5><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031170142520.png\" alt=\"image-20221031170142520\"></p>\n<p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031170459949.png\" alt=\"image-20221031170459949\"></p>\n<h5 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4.总结\"></a>4.总结</h5><p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031170530089.png\" alt=\"image-20221031170530089\"></p>\n<h4 id=\"4-微指令的设计\"><a href=\"#4-微指令的设计\" class=\"headerlink\" title=\"4.微指令的设计\"></a>4.微指令的设计</h4><h5 id=\"1-微指令的格式\"><a href=\"#1-微指令的格式\" class=\"headerlink\" title=\"1.微指令的格式\"></a>1.微指令的格式</h5><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031185643142.png\" alt=\"image-20221031185643142\" style=\"zoom:33%;\">\n\n<p>1.水平型微指令</p>\n<p>一条微指令可以定义多个可并行的微命令，微程序段，执行速度很快。但是微指令较长，编写微程序比较麻烦</p>\n<p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031185910784.png\" alt=\"image-20221031185910784\"></p>\n<p>2.垂直型微指令</p>\n<p>一条微指令只能定义一个微命令，由微操作码字段规定具体功能。</p>\n<p><img src=\"/post/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/image-20221031185924268.png\" alt=\"image-20221031185924268\"></p>\n<p>3.混合型微指令</p>\n<p>在垂直型的基础上增加一些不太复杂的并行操作。微指令较短，仍便于编写;微程序也不长，执行速度加快。</p>\n","text":"3.存储系统1.双端口RAM和多模块存储器1.多体并行存储器1.高位交叉编址 2.低位交叉编址 实际上采用了“流水线”的方式并行存取，当存储周期为T时，存取时间为r时，为了使流水线不间断，，应该保证模块数m&gt;&#x3D;T&#x2F;r，如果m小于T&#x2F;r，则cpu...","link":"","photos":[],"count_time":{"symbolsCount":"3.9k","symbolsTime":"4 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">3.存储系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%8F%8C%E7%AB%AF%E5%8F%A3RAM%E5%92%8C%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">1.双端口RAM和多模块存储器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%A4%9A%E4%BD%93%E5%B9%B6%E8%A1%8C%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">1.多体并行存储器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E9%AB%98%E4%BD%8D%E4%BA%A4%E5%8F%89%E7%BC%96%E5%9D%80\"><span class=\"toc-text\">1.高位交叉编址</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E4%BD%8E%E4%BD%8D%E4%BA%A4%E5%8F%89%E7%BC%96%E5%9D%80\"><span class=\"toc-text\">2.低位交叉编址</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E5%A4%9A%E6%A8%A1%E5%9D%97%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">3.多模块存储器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#1-%E5%A4%9A%E4%BD%93%E5%B9%B6%E8%A1%8C%E5%AD%98%E5%82%A8%E5%99%A8-1\"><span class=\"toc-text\">1.多体并行存储器</span></a></li><li class=\"toc-item toc-level-6\"><a class=\"toc-link\" href=\"#2-%E5%8D%95%E4%BD%93%E5%A4%9A%E5%AD%97%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">2.单体多字存储器</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%8F%8C%E7%AB%AF%E5%8F%A3RAM\"><span class=\"toc-text\">2.双端口RAM</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-Cache\"><span class=\"toc-text\">2.Cache</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-Cache%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">1.Cache工作原理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%B1%80%E9%83%A8%E6%80%A7%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">2.局部性原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E7%A9%BA%E9%97%B4%E5%B1%80%E9%83%A8%E6%80%A7\"><span class=\"toc-text\">1.空间局部性</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E6%97%B6%E9%97%B4%E5%B1%80%E9%83%A8%E6%80%A7\"><span class=\"toc-text\">2.时间局部性</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90\"><span class=\"toc-text\">3.性能分析</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-Cache%E5%92%8C%E4%B8%BB%E5%AD%98%E7%9A%84%E6%98%A0%E5%B0%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">3.Cache和主存的映射方式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%85%A8%E7%9B%B8%E8%81%94%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">1.全相联映射</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%9B%B4%E6%8E%A5%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">2.直接映射</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E7%BB%84%E7%9B%B8%E8%81%94%E6%98%A0%E5%B0%84\"><span class=\"toc-text\">3.组相联映射</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%9B%BF%E6%8D%A2%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">4.替换算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E9%9A%8F%E6%9C%BA%E7%AE%97%E6%B3%95%EF%BC%88RAND%EF%BC%89\"><span class=\"toc-text\">1.随机算法（RAND）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%85%88%E8%BF%9B%E5%85%88%E5%87%BA%E7%AE%97%E6%B3%95%EF%BC%88FIFO%EF%BC%89\"><span class=\"toc-text\">2.先进先出算法（FIFO）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E8%BF%91%E6%9C%9F%E6%9C%80%E5%B0%91%E4%BD%BF%E7%94%A8%E7%AE%97%E6%B3%95%EF%BC%88LRU%EF%BC%89\"><span class=\"toc-text\">3.近期最少使用算法（LRU）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E6%9C%80%E4%B8%8D%E7%BB%8F%E5%B8%B8%E4%BD%BF%E7%94%A8%E7%AE%97%E6%B3%95%EF%BC%88LFU%EF%BC%89\"><span class=\"toc-text\">4.最不经常使用算法（LFU）</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">5.总结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-Cache%E5%86%99%E7%AD%96%E7%95%A5%EF%BC%88%E7%A1%AE%E4%BF%9D%E4%B8%BB%E5%AD%98%E4%B8%AD%E6%AF%8D%E6%9C%AC%E4%B8%80%E8%87%B4%E6%80%A7%EF%BC%89\"><span class=\"toc-text\">5.Cache写策略（确保主存中母本一致性）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%86%99%E5%91%BD%E4%B8%AD\"><span class=\"toc-text\">1.写命中</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%86%99%E5%9B%9E%E6%B3%95\"><span class=\"toc-text\">1.写回法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%85%A8%E5%86%99%E6%B3%95\"><span class=\"toc-text\">2.全写法</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%86%99%E4%B8%8D%E5%91%BD%E4%B8%AD\"><span class=\"toc-text\">2.写不命中</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%86%99%E5%88%86%E9%85%8D%E6%B3%95\"><span class=\"toc-text\">1.写分配法</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E9%9D%9E%E5%86%99%E5%88%86%E9%85%8D%E6%B3%95\"><span class=\"toc-text\">2.非写分配法</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3%E5%A4%9A%E7%BA%A7cache\"><span class=\"toc-text\">3多级cache</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E9%A1%B5%E5%BC%8F%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">6.页式存储器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">1.定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%99%9A%E5%9C%B0%E5%9D%80%E5%92%8C%E5%AE%9E%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">2.虚地址和实地址</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%9C%B0%E5%9D%80%E5%8F%98%E6%8D%A2%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">3.地址变换过程</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E6%B3%A8%E6%84%8F\"><span class=\"toc-text\">4.注意</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">7.虚拟存储器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E9%A1%B5%E9%9D%A2%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">1.页面虚拟存储器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E5%AD%98%E5%82%A8%E5%99%A8%E5%B1%82%E6%AC%A1%E5%8C%96%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2.存储器层次化结构</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%AE%B5%E5%BC%8F%E8%99%9A%E6%8B%9F%E5%AD%98%E5%82%A8%E5%99%A8\"><span class=\"toc-text\">3.段式虚拟存储器</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E6%8C%87%E4%BB%A4%E7%B3%BB%E7%BB%9F\"><span class=\"toc-text\">4.指令系统</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-%E5%9B%9E%E5%BF%86%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%B7%A5%E4%BD%9C%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">1.回忆计算机工作过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E6%8C%87%E4%BB%A4%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">2.指令格式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%8C%87%E4%BB%A4%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">1.指令的定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%8C%87%E4%BB%A4%E6%A0%BC%E5%BC%8F-1\"><span class=\"toc-text\">2.指令格式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E9%9B%B6%E5%9C%B0%E5%9D%80%E6%8C%87%E4%BB%A4%EF%BC%88OP%EF%BC%89\"><span class=\"toc-text\">1.零地址指令（OP）</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E4%B8%80%E5%9C%B0%E5%9D%80%E6%8C%87%E4%BB%A4%EF%BC%88OP-A1%EF%BC%89\"><span class=\"toc-text\">2.一地址指令（OP + A1）</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%8C%89%E7%85%A7%E6%8C%87%E4%BB%A4%E9%95%BF%E5%BA%A6%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">3.按照指令长度分类</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E6%8C%89%E7%85%A7%E6%93%8D%E4%BD%9C%E7%B1%BB%E5%9E%8B%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">4.按照操作类型分类</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">3.总结</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-%E6%89%A9%E5%B1%95%E6%93%8D%E4%BD%9C%E7%A0%81\"><span class=\"toc-text\">4.扩展操作码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%8C%87%E4%BB%A4%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">5.指令寻址</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E9%A1%BA%E5%BA%8F%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">1.顺序寻址</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E8%BD%AC%E7%A7%BB%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">2.转移寻址</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%80%BB%E7%BB%93-1\"><span class=\"toc-text\">3.总结</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%95%B0%E6%8D%AE%E5%AF%BB%E5%9D%80\"><span class=\"toc-text\">6.数据寻址</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8\"><span class=\"toc-text\">5.中央处理器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-CPU%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84%E5%92%8C%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">1.CPU基本结构和功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%8C%87%E4%BB%A4%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">1.指令控制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E6%93%8D%E4%BD%9C%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">2.操作控制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%97%B6%E9%97%B4%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">3.时间控制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%B7%A5\"><span class=\"toc-text\">4.数据加工</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#5-%E4%B8%AD%E6%96%AD%E5%A4%84%E7%90%86\"><span class=\"toc-text\">5.中断处理</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-%E8%BF%90%E7%AE%97%E5%99%A8\"><span class=\"toc-text\">6.运算器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-%E6%8E%A7%E5%88%B6%E5%99%A8\"><span class=\"toc-text\">7.控制器</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-%E8%BF%90%E7%AE%97%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2.运算器的基本结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">3.控制器的基本结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-CPU%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">4.CPU基本结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-%E6%8C%87%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">5.指令的执行过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E6%8C%87%E4%BB%A4%E5%91%A8%E6%9C%9F\"><span class=\"toc-text\">1.指令周期</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF%E7%9A%84%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">6.数据通路的功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E5%AF%84%E5%AD%98%E5%99%A8%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81\"><span class=\"toc-text\">1.寄存器之间的数据传送</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%B8%BB%E5%AD%98%E5%92%8CCPU%E4%B9%8B%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81\"><span class=\"toc-text\">2.主存和CPU之间的数据传送</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E6%89%A7%E8%A1%8C%E7%AE%97%E6%9C%AF%E6%88%96%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97\"><span class=\"toc-text\">3.执行算术或逻辑运算</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-%E4%B8%93%E7%94%A8%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF\"><span class=\"toc-text\">7.专用数据通路</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#8-%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">8.控制器的设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E7%A1%AC%E5%B8%83%E7%BA%BF%E6%8E%A7%E5%88%B6%E5%99%A8\"><span class=\"toc-text\">1.硬布线控制器</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E7%A1%AC%E5%B8%83%E7%BA%BF%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">2.硬布线控制器的设计</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%99%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%EF%BC%88%E8%80%83%E5%AF%9F%E9%A2%91%E7%8E%87%E8%BE%83%E9%AB%98%EF%BC%89\"><span class=\"toc-text\">3.微程序控制器的基本原理（考察频率较高）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%BE%AE%E7%A8%8B%E5%BA%8F\"><span class=\"toc-text\">1.微程序</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#2-%E5%BE%AE%E7%A8%8B%E5%BA%8F%E6%8E%A7%E5%88%B6%E5%99%A8%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">2.微程序控制器基本结构</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#3-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">3.工作原理</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">4.总结</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E5%BE%AE%E6%8C%87%E4%BB%A4%E7%9A%84%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">4.微指令的设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#1-%E5%BE%AE%E6%8C%87%E4%BB%A4%E7%9A%84%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">1.微指令的格式</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"操作系统","uid":"8c6c59136f9c0c8c29b87ea646eed9d1","slug":"操作系统","date":"2022-11-11T13:53:28.000Z","updated":"2022-11-18T14:48:30.435Z","comments":true,"path":"api/articles/操作系统.json","keywords":null,"cover":[],"text":"3.1内存的基础知识1.什么是内存1.内存是用来存放数据的硬件。程序执行钱需要先放到内存中才能被CPU处理。 3.2.装入的三种方式（完成逻辑地址到物理地址的转换）1.绝对装入在编译时，如果知道程序将放到内存中的哪个位置，编译程序将产生绝对地址的目标代码。装入程序按照装入模块中的...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}